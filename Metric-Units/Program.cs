using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Synthesis;
using Noggog;
using System;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using MetricUnits.Util;

namespace MetricUnits
{
    public class Program
    {
        private static Lazy<Settings> _lazySettings = null!;
        private static Settings Settings => _lazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "Ordinator - Metric Units Patch.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _lazySettings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine("Initialization Complete");

            ulong count = 0;

            Regex regex = new("<([0-9.-]+)>\\s([Ff][EeOo][EeOo][Tt])", RegexOptions.Singleline);
            
            foreach (var mgef in state.LoadOrder.PriorityOrder.MagicEffect().WinningContextOverrides())
            {
                if (Settings.Whitelisted(mgef.ModKey) || mgef.Record.EditorID == null || mgef.Record.Description == null || !mgef.Record.Description.Any())
                    continue;

                var copy = mgef.Record.DeepCopy()!;

                ulong copyCount = count;
                // replace all regex matches with the string determined by the delegate
                var str = regex.Replace(copy.Description!.Lookup(Language.English) ?? "", delegate(Match m)
                {
                    if (!m.Success || m.Groups.Count < 2)
                        return m.Value; // don't modify
                    
                    Unit.ID unit = Unit.FromString(m.Groups[1].Value);
                   
                    if (unit == Unit.ID.FEET)
                        return m.Value;

                    double n = Convert.ToDouble(m.Groups[0].Value);

                    double? result = Unit.Convert(n, unit, Unit.ID.METERS);

                    if (result == null)
                        return m.Value;

                    Console.WriteLine($"[{++count}]\tReplaced usage of feet with meters in record: {mgef.Record.EditorID}");

                    return $"<{result}> meter{(result.EqualsWithin(1.0) ? "s" : "")}";
                });

                if (count == copyCount)
                    continue;
                
                // else copy back into output patch
                state.PatchMod.MagicEffects.Set(copy);
            }
            

            Console.WriteLine($"Complete. Patched {count} record{(count > 1 ? "s" : "")}.");
        }
    }
}
